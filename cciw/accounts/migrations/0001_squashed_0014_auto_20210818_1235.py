# Generated by Django 4.0.7 on 2022-10-15 13:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import cciw.accounts.models


class Migration(migrations.Migration):
    replaces = [
        ("accounts", "0001_squashed_0006_auto_20150818_1728"),
        ("accounts", "0002_auto_20151125_1439"),
        ("accounts", "0003_auto_20161118_2008"),
        ("accounts", "0004_user_contact_phone_number"),
        ("accounts", "0005_auto_20190131_0744"),
        ("accounts", "0006_role"),
        ("accounts", "0007_auto_20201221_1908"),
        ("accounts", "0008_role_allow_emails_from_public"),
        ("accounts", "0009_auto_20201222_1217"),
        ("accounts", "0010_auto_20210118_0700"),
        ("accounts", "0011_auto_20210403_1923"),
        ("accounts", "0012_user_erased_on"),
        ("accounts", "0013_auto_20210411_1136"),
        ("accounts", "0014_auto_20210818_1235"),
    ]

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
        ("auth", "0006_require_contenttypes_0002"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30)),
                ("last_name", models.CharField(blank=True, max_length=150)),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "contact_phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Required only for staff like CPO who need to be contacted.",
                        max_length=40,
                        verbose_name="Phone number",
                    ),
                ),
                ("bad_password", models.BooleanField(default=False)),
                ("password_validators_used", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterModelManagers(
            name="user",
            managers=[
                ("objects", cciw.accounts.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="erased_on",
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150, unique=True)),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="Email address including domain. Optional.", max_length=254
                    ),
                ),
                (
                    "email_recipients",
                    models.ManyToManyField(
                        blank=True,
                        help_text='This defines which users will be emailed for email sent to the role email address above. Usually the same as "members", or a subset, but could have additional people.',
                        related_name="roles_as_email_recipient",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        help_text="This defines which users have access rights to all the functionality on the website related to this role. ",
                        related_name="roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("permissions", models.ManyToManyField(blank=True, related_name="roles", to="auth.permission")),
                (
                    "allow_emails_from_public",
                    models.BooleanField(
                        default=False,
                        help_text="If unchecked, the email address will be a group communication list, usable only by other members of the list.",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "roles",
            },
            managers=[
                ("objects", cciw.accounts.models.RoleManager()),
            ],
        ),
        migrations.AlterField(
            model_name="user",
            name="id",
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
        ),
    ]
